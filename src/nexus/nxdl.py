"""This file was generated by xsdata, v24.7, on 2024-08-05 10:42:45

Generator: PydanticGenerator
See: https://xsdata.readthedocs.io/
"""

from __future__ import annotations

from enum import Enum
from typing import ForwardRef

from pydantic import BaseModel, ConfigDict
from xsdata.models.datatype import XmlDateTime
from xsdata_pydantic.fields import field

__NAMESPACE__ = "http://definition.nexusformat.org/nxdl/3.1"


class ChoiceType(BaseModel):
    """A ``choice`` element is used when a named group might take one of several
    possible NeXus base classes.

    Logically, it must have at least two group children.

    Attributes:
        group: NeXus base class that could be used here. The group will
            take the ``@name`` attribute defined by the parent
            ``choice`` element so do not specify the ``@name`` attribute
            of the group here.
        name: The name to be applied to the selected child group. None
            of the child groups should define a ``@name`` attribute.
    """

    class Meta:
        name = "choiceType"

    model_config = ConfigDict(defer_build=True)
    group: list[GroupType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "min_occurs": 2,
        },
    )
    name: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "max_length": 63,
            "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
        }
    )


class DefinitionTypeAttr(Enum):
    """Prescribes the allowed values for ``definition`` ``type`` attribute.

    (This data type is used internally in the NXDL schema to define a
    data type.)
    """

    GROUP = "group"
    DEFINITION = "definition"


class DefinitionTypeCategory(Enum):
    BASE = "base"
    APPLICATION = "application"


class DocType(BaseModel):
    """NXDL allows for documentation on most elements using the ``doc`` element.

    The documentation is useful in several contexts. The documentation will be
    rendered in the manual. Documentation, is provided as tooltips
    by some XML editors when editing NXDL files.
    Simple documentation can be typed directly in the NXDL::
    <field xmlns="" name="name">
    <doc>Descriptive name of sample</doc>
    </field>
    This is suitable for basic descriptions that do not need extra formatting
    such as a bullet-list or a table. For more advanced control, use the rules
    of restructured text, such as in the :ref:`NXdetector` specification.
    Refer to examples in the NeXus base class NXDL files such as :ref:`NXdata`.
    Could contain these elements:
    * *any*
    (This data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)
    Note:
    For documentation of ``definition`` elements,
    the first line of text in a ``doc``
    is used as a summary in the manual.
    Follow the pattern as shown
    in the base class NXDL files.
    """

    class Meta:
        name = "docType"

    model_config = ConfigDict(defer_build=True)
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


class FieldTypeInterpretation(Enum):
    SCALAR = "scalar"
    SPECTRUM = "spectrum"
    IMAGE = "image"
    RGB_IMAGE = "rgb-image"
    RGBA_IMAGE = "rgba-image"
    HSL_IMAGE = "hsl-image"
    HSLA_IMAGE = "hsla-image"
    CMYK_IMAGE = "cmyk-image"
    VERTEX = "vertex"


class FieldTypeNameType(Enum):
    SPECIFIED = "specified"
    ANY = "any"


class NonNegativeUnboundedValue(Enum):
    UNBOUNDED = "unbounded"


class BasicComponent(BaseModel):
    """A ``basicComponent`` defines the allowed name format and attributes common
    to all ``field`` and ``group`` specifications.

    (This data type is used internally in the NXDL schema to define
    elements and attributes to be used by users in NXDL specifications.)

    Attributes:
        doc: Describe this ``basicComponent`` and its use. This
            documentation will go into the manual.
        name: The ``name`` attribute is the identifier string for this
            entity. It is required that ``name`` must be unique within
            the enclosing ``group``. The name must match the regular
            expression defined by ``validItemName``. (Historical note:
            Originally, the rule (``validItemName``) was defined to
            allow only names that can be represented as valid variable
            names in most computer languages. )
        deprecated: The presence of the ``deprecated`` attribute
            indicates to the data file validation process that an
            advisory message (specified as the content of the
            ``deprecated`` attribute) will be reported. Future versions
            of the NXDL file might not define (or even re-use) the
            component marked with this attribute. The value of the
            attribute will be printed in the documentation. Make it
            descriptive (limited to no line breaks). For example::
            deprecated="as of release MAJOR.MINOR" Note: because
            ``deprecated`` is an attribute, the XML rules do not permit
            it to have any element content.
    """

    class Meta:
        name = "basicComponent"

    model_config = ConfigDict(defer_build=True)
    doc: None | DocType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    name: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "max_length": 63,
            "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
        }
    )
    deprecated: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*(\w+).*",
        },
    )


class DimensionsType(BaseModel):
    """
    Dimensions of a data element in a NeXus file (This data type is used internally
    in the NXDL schema to define elements and attributes to be used by users in
    NXDL specifications.)

    Attributes:
        doc: Documentation might be necessary to describe how the parts
            of the ``dimensions`` element are to be used.
        dim: Specify the parameters for each index of the ``dimensions``
            element with a ``dim`` element. The number of ``dim``
            entries should be equal to the ``rank`` of the array. For
            example, these terms describe a 2-D array with lengths
            (``nsurf``, ``nwl``): .. code-block:: xml :linenos:
            <dimensions xmlns="" rank="2"> <dim index="1"
            value="nsurf"/> <dim index="2" value="nwl"/> </dimensions>
            The ``value`` attribute is used by NXDL and also by the
            NeXus data file validation tools to associate and coordinate
            the same array length across multiple fields in a group.
        rank: Rank (number of dimensions) of the data structure. Value
            could be either an unsigned integer or a symbol as defined
            in the *symbol* table of the NXDL file. For example:
            ``a[5]`` has ``rank="1"`` while ``b[8,5,6,4]`` has
            ``rank="4"``. See
            https://en.wikipedia.org/wiki/Rank_%28computer_programming%29
            for more details.
    """

    class Meta:
        name = "dimensionsType"

    model_config = ConfigDict(defer_build=True)
    doc: None | DocType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    dim: list[DimensionsType.Dim] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    rank: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    class Dim(BaseModel):
        """
        Attributes:
            index: Number or symbol indicating which axis (subscript) is
                being described, ranging from 1 up to ``rank`` (rank of
                the data structure).  For example, given an array
                ``A[i,j,k]``, ``index="1"`` would refer to the ``i``
                axis (subscript).
            value: Integer length (number of values), or mnemonic symbol
                representing the length of this axis.
            ref: Deprecated: 2016-11-23 telco
                (https://github.com/nexusformat/definitions/issues/330)
                The dimension specification is the same as that in the
                ``ref`` field, specified either by a relative path, such
                as ``polar_angle`` or ``../Qvec`` or absolute path, such
                as ``/entry/path/to/follow/to/ref/field``.
            refindex: Deprecated: 2016-11-23 telco
                (https://github.com/nexusformat/definitions/issues/330)
                The dimension specification is the same as the
                ``refindex`` axis within the ``ref`` field. Requires
                ``ref`` attribute to be present.
            incr: Deprecated: 2016-11-23 telco
                (https://github.com/nexusformat/definitions/issues/330)
                The dimension specification is related to the
                ``refindex`` axis within the ``ref`` field by an offset
                of ``incr``.  Requires ``ref`` and ``refindex``
                attributes to be present.
            required: This dimension is required (true: default) or not
                required (false). The default value is ``true``. When
                ``required="false"`` is specified, all subsequent
                ``&lt;dim`` nodes (with higher ``index`` value) **must**
                also have ``required="false"``.
        """

        model_config = ConfigDict(defer_build=True)
        index: str = field(
            metadata={
                "type": "Attribute",
                "required": True,
            }
        )
        value: None | str = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        ref: None | str = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        refindex: None | str = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        incr: None | str = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )
        required: bool = field(
            default=True,
            metadata={
                "type": "Attribute",
            },
        )


class EnumerationType(BaseModel):
    """An ``enumeration`` restricts the values allowed for a specification.

    Each value is specified using an ``item`` element, such as:
    ``&lt;item value="Synchrotron X-ray Source" /&gt;``.
    Could contain these elements:
    * ``doc``
    * ``item``
    (This data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)
    ::
    <field xmlns="" name="mode">
    <doc>source operating mode</doc>
    <enumeration>
    <item value="Single Bunch">
    <doc>for storage rings</doc>
    </item>
    <item value="Multi Bunch">
    <doc>for storage rings</doc>
    </item>
    </enumeration>
    </field>

    Attributes:
        item: One of the prescribed values.  Use the ``value``
            attribute. Defines the value of one selection for an
            ``enumeration`` list. Each enumerated item must have a value
            (it cannot have an empty text node).
    """

    class Meta:
        name = "enumerationType"

    model_config = ConfigDict(defer_build=True)
    item: list[EnumerationType.Item] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "min_occurs": 1,
        },
    )

    class Item(BaseModel):
        """
        Attributes:
            doc: Individual items can be documented but this
                documentation might not be printed in the *NeXus
                Reference Guide*.
            value: The value of ``value`` of an ``enumItem`` is defined
                as an attribute rather than a name.
        """

        model_config = ConfigDict(defer_build=True)
        doc: None | DocType = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            },
        )
        value: object = field(
            metadata={
                "type": "Attribute",
                "required": True,
            }
        )


class SymbolsType(BaseModel):
    """Each ``symbol`` has a ``name`` and optional documentation.

    Please provide documentation that indicates what each symbol represents.
    For example::
    <symbols xmlns="">
    <symbol name="nsurf">
    <doc>number of reflecting surfaces</doc>
    </symbol>
    <symbol name="nwl">
    <doc>number of wavelengths</doc>
    </symbol>
    </symbols>
    """

    class Meta:
        name = "symbolsType"

    model_config = ConfigDict(defer_build=True)
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
            "choices": (
                {
                    "name": "doc",
                    "type": DocType,
                    "namespace": "http://definition.nexusformat.org/nxdl/3.1",
                },
                {
                    "name": "symbol",
                    "type": ForwardRef("SymbolsType.Symbol"),
                    "namespace": "http://definition.nexusformat.org/nxdl/3.1",
                },
            ),
        },
    )

    class Symbol(BaseModel):
        """
        Attributes:
            doc: Describe the purpose of the parent ``symbol``. This
                documentation will go into the manual.
            name: Mnemonic variable name for this array index symbol.
        """

        model_config = ConfigDict(defer_build=True)
        doc: None | DocType = field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            },
        )
        name: None | str = field(
            default=None,
            metadata={
                "type": "Attribute",
                "max_length": 63,
                "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
            },
        )


class AttributeType(BaseModel):
    """Any new group or field may expect or require some common attributes.
    ..
    Could contain these elements:
    * ``doc``
    * ``enumeration``
    (This data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)

    Attributes:
        doc: Description of this ``attribute``. This documentation will
            go into the manual.
        enumeration: An enumeration specifies the values to be used.
        dimensions: dimensions of an attribute with data value(s) in a
            NeXus file
        name: Name of the attribute (unique within the enclosing group).
        type_value: Type of the attribute. For ``group`` specifications,
            the class name. For ``field`` or ``attribute``
            specifications, the NXDL field type.
        recommended: A synonym for optional, but with the recommendation
            that this attribute be specified.
        optional: Is this attribute *optional* (if **true**) or
            *required* (if **false**)?
        deprecated: The presence of the ``deprecated`` attribute
            indicates to the data file validation process that an
            advisory message (specified as the content of the
            ``deprecated`` attribute) will be reported. Future versions
            of the NXDL file might not define (or even re-use) the
            component marked with this attribute. The value of the
            attribute will be printed in the documentation. Make it
            descriptive (limited to no line breaks). For example::
            deprecated="as of release MAJOR.MINOR" Note: because
            ``deprecated`` is an attribute, the XML rules do not permit
            it to have any element content.
    """

    class Meta:
        name = "attributeType"

    model_config = ConfigDict(defer_build=True)
    doc: None | DocType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    enumeration: None | EnumerationType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    dimensions: None | DimensionsType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    name: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "max_length": 63,
            "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
        }
    )
    type_value: list[XmlDateTime | int | bool | float | str] = field(
        default_factory=lambda: [
            "NX_CHAR",
        ],
        metadata={
            "name": "type",
            "type": "Attribute",
            "length": 2,
            "tokens": True,
        },
    )
    recommended: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    optional: bool = field(
        default=True,
        metadata={
            "type": "Attribute",
        },
    )
    deprecated: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*(\w+).*",
        },
    )


class LinkType(BasicComponent):
    """A link to another item.

    Use a link to avoid needless repetition of information. (This data
    type is used internally in the NXDL schema to define elements and
    attributes to be used by users in NXDL specifications.)

    Attributes:
        target: Declares the absolute HDF5 address of an existing field
            or group. The target attribute is added for NeXus to
            distinguish the HDF5 path to the original dataset. Could
            contain these elements: * ``doc`` Matching regular
            expression:: (/[a-zA-Z_][\\w_]*(:[a-zA-Z_][\\w_]*)?)+ For
            example, given a ``/entry/instrument/detector/polar_angle``
            field, link it into the ``NXdata`` group (at
            ``/entry/data/polar_angle``). This would be the NeXus data
            file structure:: /: NeXus/HDF5 data file /entry:NXentry
            /data:NXdata /polar_angle:NX_NUMBER
            @target="/entry/instrument/detector/polar_angle"
            /instrument:NXinstrument /detector:NXdetector
            /polar_angle:NX_NUMBER
            @target="/entry/instrument/detector/polar_angle"
        napimount: Group attribute that provides a URL to a group in
            another file. More information is described in the *NeXus
            Programmers Reference*.
            http://manual.nexusformat.org/_static/NeXusIntern.pdf
    """

    class Meta:
        name = "linkType"

    model_config = ConfigDict(defer_build=True)
    target: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"(/[a-zA-Z_][\w_]*(:[a-zA-Z_][\w_]*)?)+",
        }
    )
    napimount: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class FieldType(BasicComponent):
    """A ``field`` declares a new element in the component being defined.

    A ``field`` is synonymous with the HDF4 SDS (Scientific Data Set) and
    the HDF5 *dataset* terms.   Could contain these elements:
    * ``attribute``
    * ``dimensions``
    * ``doc``
    * ``enumeration``
    Note that a ``field`` element also includes the definitions of the
    ``basicComponent`` data type.
    (The ``fieldType`` data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)

    Attributes:
        dimensions: dimensions of a data element in a NeXus file
        attribute: attributes to be used with this field
        enumeration: A field can specify which values are to be used
        units: String describing the engineering units. The string
            should be appropriate for the value and should conform to
            the NeXus rules for units. Conformance is not validated at
            this time.
        long_name: Descriptive name for this field (may include
            whitespace and engineering units). Often, the long_name
            (when defined) will be used as the axis label on a plot.
        signal: Presence of the ``signal`` attribute means this field is
            an ordinate. Integer marking this field as plottable data
            (ordinates). The value indicates the priority of selection
            or interest. Some facilities only use ``signal=1`` while
            others use ``signal=2`` to indicate plottable data of
            secondary interest. Higher numbers are possible but not
            common and interpretation is not standard. A field with a
            ``signal`` attribute should not have an ``axis`` attribute.
        axes: NOTE: Use of the ``axes`` attribute for a *field* is
            discouraged.  It is for legacy support. You should use the
            ``axes`` group attribute (such as in NXdata) instead. This
            attribute contains a string array that defines the
            independent data fields used in the default plot for all of
            the dimensions of the *signal* field (the *signal* field is
            the field in this group that is named by the ``signal``
            attribute of this group). When there is only one item in the
            string array, it is acceptable to set the value to the one
            string. In such case, it is not necessary to make it an
            array of one string. Presence of the ``axes`` attribute
            means this field is an ordinate.
        axis: NOTE: Use of this attribute is discouraged.  It is for
            legacy support. You should use the ``axes`` group attribute
            (such as in NXdata) instead. Presence of the ``axis``
            attribute means this field is an abscissa. The attribute
            value is an integer indicating this field as an axis that is
            part of the data set. The data set is a field with the
            attribute ``signal=1`` in the same group. The value can
            range from 1 up to the number of independent axes
            (abscissae) in the data set. A value of ``axis=1``"
            indicates that this field contains the data for the first
            independent axis. For example, the X axis in an XY data set.
            A value of ``axis=2`` indicates that this field contains the
            data for the second independent axis. For example, the Y
            axis in a 2-D data set. A value of ``axis=3`` indicates that
            this field contains the data for the third independent axis.
            For example, the Z axis in a 3-D data set. A field with an
            ``axis`` attribute should not have a ``signal`` attribute.
        primary: Integer indicating the priority of selection of this
            field for plotting (or visualization) as an axis. Presence
            of the ``primary`` attribute means this field is an
            abscissa.
        type_value: Defines the type of the element as allowed by NeXus.
            See :ref:`here&lt;Design-DataTypes&gt;` and
            :ref:`elsewhere&lt;nxdl-types&gt;` for the complete list of
            allowed types.
        min_occurs: Defines the minimum number of times this ``field``
            may be used.  Its value is confined to zero or greater.
            Must be less than or equal to the value for the "maxOccurs"
            attribute.
        recommended: A synonym for optional, but with the recommendation
            that this ``field`` be specified.
        optional: A synonym for minOccurs=0.
        max_occurs: Defines the maximum number of times this element may
            be used.  Its value is confined to zero or greater.  Must be
            greater than or equal to the value for the "minOccurs"
            attribute. A value of "unbounded" is allowed.
        stride: The ``stride`` and ``data_offset`` attributes are used
            together to index the array of data items in a multi-
            dimensional array.  They may be used as an alternative
            method to address a data array that is not stored in the
            standard NeXus method of "C" order. The ``stride`` list
            chooses array locations from the data array  with each value
            in the ``stride`` list determining how many elements to move
            in each dimension. Setting a value in the ``stride`` array
            to 1 moves to each element in that dimension of the data
            array, while setting a value of 2 in a location in the
            ``stride`` array moves to every other element in that
            dimension of the data array.  A value in the ``stride`` list
            may be positive to move forward or negative to step
            backward. A value of zero will not step (and is of no
            particular use). See
            https://support.hdfgroup.org/HDF5/Tutor/phypereg.html or *4.
            Dataspace Selection Operations* in
            https://portal.hdfgroup.org/display/HDF5/Dataspaces The
            ``stride`` attribute contains a comma-separated list of
            integers. (In addition to the required comma delimiter,
            whitespace is also allowed to improve readability.) The
            number of items in the list is equal to the rank of the data
            being stored.  The value of each item is the spacing of the
            data items in that subscript of the array.
        data_offset: The ``stride`` and ``data_offset`` attributes are
            used together to index the array of data items in a multi-
            dimensional array.  They may be used as an alternative
            method to address a data array that is not stored in the
            standard NeXus method of "C" order. The ``data_offset``
            attribute determines the starting coordinates of the data
            array for each dimension. See
            https://support.hdfgroup.org/HDF5/Tutor/phypereg.html or *4.
            Dataspace Selection Operations* in
            https://portal.hdfgroup.org/display/HDF5/Dataspaces The
            ``data_offset`` attribute contains a comma-separated list of
            integers. (In addition to the required comma delimiter,
            whitespace is also allowed to improve readability.) The
            number of items in the list is equal to the rank of the data
            being stored.  The value of each item is the offset in the
            array of the first data item of that subscript of the array.
        interpretation: This instructs the consumer of the data what the
            last dimensions of the data are. It allows plotting software
            to work out the natural way of displaying the data. For
            example a single-element, energy-resolving, fluorescence
            detector with 512 bins should have
            ``interpretation="spectrum"``. If the detector is scanned
            over a 512 x 512 spatial grid, the data reported will be of
            dimensions: 512 x 512 x 512. In this example, the initial
            plotting representation should default to data of the same
            dimensions of a 512 x 512 pixel ``image`` detector where the
            images where taken at 512 different pressure values. In
            simple terms, the allowed values mean: * ``scalar`` = 0-D
            data to be plotted * ``scaler`` = DEPRECATED, use ``scalar``
            * ``spectrum`` = 1-D data to be plotted * ``image`` = 2-D
            data to be plotted * ``rgb-image`` = 3-D data to be plotted
            * ``rgba-image`` = 3-D data to be plotted * ``hsl-image`` =
            3-D data to be plotted * ``hsla-image`` = 3-D data to be
            plotted * ``cmyk-image`` = 3-D data to be plotted *
            ``vertex`` = 3-D data to be plotted
        name_type: This interprets the name attribute as: *
            ``specified`` = use as specified * ``any`` = can be any name
            not already used in group
    """

    class Meta:
        name = "fieldType"

    model_config = ConfigDict(defer_build=True)
    dimensions: None | DimensionsType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    attribute: list[AttributeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    enumeration: None | EnumerationType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    units: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    long_name: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    signal: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axes: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axis: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    primary: None | int = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: list[XmlDateTime | int | bool | float | str] = field(
        default_factory=lambda: [
            "NX_CHAR",
        ],
        metadata={
            "name": "type",
            "type": "Attribute",
            "length": 2,
            "tokens": True,
        },
    )
    min_occurs: int | NonNegativeUnboundedValue = field(
        default=0,
        metadata={
            "name": "minOccurs",
            "type": "Attribute",
        },
    )
    recommended: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    optional: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    max_occurs: int | NonNegativeUnboundedValue = field(
        default=1,
        metadata={
            "name": "maxOccurs",
            "type": "Attribute",
        },
    )
    stride: int = field(
        default=1,
        metadata={
            "type": "Attribute",
        },
    )
    data_offset: int | NonNegativeUnboundedValue = field(
        default=1,
        metadata={
            "type": "Attribute",
        },
    )
    interpretation: None | FieldTypeInterpretation = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    name_type: FieldTypeNameType = field(
        default=FieldTypeNameType.SPECIFIED,
        metadata={
            "name": "nameType",
            "type": "Attribute",
        },
    )


class GroupType(BaseModel):
    """A group element refers to the definition of an existing NX object or a
    locally-defined component.

    Could contain these elements:
    * ``attribute``
    * ``doc``
    * ``field``
    * ``group``
    * ``link``
    Note that a ``group`` element also includes the definitions of the
    ``basicComponent`` data type.
    (The ``groupType`` data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)

    Attributes:
        doc: Describe the purpose of this ``group``. This documentation
            will go into the manual. The first line should summarize as
            a complete sentence with no line break. (The automatic
            documentation will pick just the first line as a summary.)
            Then a blank line should be added before any further
            documentation. Indentation should be consistent with rules
            for reStructured text.
        attribute: Use an ``attribute`` if additional information needs
            to be associated with a ``group``.
        choice: Use a ``choice`` if a named group could be either of a
            defined list of base classes.
        group: A ``group`` may contain ``group``s.
        field_value: A ``group`` may contain ``field`` elements
            (datasets).
        link: Use a ``link`` to refer locally to information placed
            elsewhere else in the data storage hierarchy. The ``name``
            attribute uniquely identifies the element in this ``group``.
            The ``target`` attribute (added automatically in a data file
            by the NAPI) identifies the original location of this data
            in the data storage hierarchy. In an NXDL specification, the
            ``target`` attribute indicates a link to be made by the
            software that writes the data file. The value, as written in
            the NXDL file, will be a suggestion of the path to the
            source of the link. For example:: <link xmlns="" name="data"
            target="/NXentry/NXinstrument/NXdetector/data"/> The value
            of ``target`` is written using the NeXus class names since
            this is a suggestion and does not actually use the element
            names from a particular data file.
        type_value: The ``type`` attribute *must* contain the name of a
            NeXus base class, application definition, or contributed
            definition.
        name: A particular scientific application may expect a name of a
            ``group`` element. It is helpful but not required to specify
            the ``name`` attribute in the NXDL file. It is suggested to
            always specify a ``name`` to avoid ambiguity.  It is also
            suggested to derive the ``name`` from the type, using an
            additional number suffix as necessary. For example, consider
            a data file with only one ``NXentry``.  The suggested
            default ``name`` would be ``entry``.  For a data file with
            two or more ``NXentry`` groups, the suggested names would be
            ``entry1``, ``entry2``, ... Alternatively, a scientific
            application such as small-angle scattering might require a
            different naming procedure; two different ``NXaperture``
            groups might be given the names ``beam_defining_slit`` and
            ``scatter_slit``.
        min_occurs: Minimum number of times this ``group`` is allowed to
            be present within its parent group.  Note each ``group``
            must have a ``name`` attribute that is unique among all
            ``group`` and ``field`` declarations within a common parent
            group.
        recommended: A synonym for optional, but with the recommendation
            that this ``group`` be specified.
        optional: A synonym for minOccurs=0.
        max_occurs: Maximum number of times this ``group`` is allowed to
            be present within its parent ``group``.  Note each ``group``
            must have a ``name`` attribute that is unique among all
            ``group`` and ``field`` declarations within a common parent
            ``group``.
        deprecated: The presence of the ``deprecated`` attribute
            indicates to the data file validation process that an
            advisory message (specified as the content of the
            ``deprecated`` attribute) will be reported. Future versions
            of the NXDL file might not define (or even re-use) the
            component marked with this attribute. The value of the
            attribute will be printed in the documentation. Make it
            descriptive (limited to no line breaks). For example::
            deprecated="as of release MAJOR.MINOR" Note: because
            ``deprecated`` is an attribute, the XML rules do not permit
            it to have any element content.
    """

    class Meta:
        name = "groupType"

    model_config = ConfigDict(defer_build=True)
    doc: list[DocType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    attribute: list[AttributeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    choice: list[ChoiceType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    group: list[GroupType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    field_value: list[FieldType] = field(
        default_factory=list,
        metadata={
            "name": "field",
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    link: list[LinkType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
            "sequence": 1,
        },
    )
    type_value: str = field(
        metadata={
            "name": "type",
            "type": "Attribute",
            "required": True,
            "max_length": 63,
            "pattern": r"NX.+",
        }
    )
    name: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "max_length": 63,
            "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
        },
    )
    min_occurs: int | NonNegativeUnboundedValue = field(
        default=0,
        metadata={
            "name": "minOccurs",
            "type": "Attribute",
        },
    )
    recommended: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    optional: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    max_occurs: None | int | NonNegativeUnboundedValue = field(
        default=None,
        metadata={
            "name": "maxOccurs",
            "type": "Attribute",
        },
    )
    deprecated: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*(\w+).*",
        },
    )


class DefinitionType(BaseModel):
    """A ``definition`` is the root element of every NXDL definition.

    It may *only* appear at the root of an NXDL file and must only
    appear **once** for the NXDL to be *well-formed*.
    The ``definitionType`` defines the documentation,
    attributes, fields, and groups that will be used
    as children of the ``definition`` element.
    Could contain these elements:
    * ``attribute``
    * ``doc``
    * ``field``
    * ``group``
    * ``link``
    Note that a ``definition`` element also includes the definitions of the
    ``basicComponent`` data type.
    (The ``definitionType`` data type is used internally in the NXDL schema
    to define elements and attributes to be used by users in NXDL specifications.)
    Note that the first line of text in a ``doc`` element in a ``definition``
    is used as a summary in the manual.  Follow the pattern as shown
    in the base class NXDL files.

    Attributes:
        symbols: Use a ``symbols`` list to define each of the mnemonics
            that represent the length of each dimension in a vector or
            array.
        doc: Describe the purpose of this ``group``. This documentation
            will go into the manual. The first line should summarize as
            a complete sentence with no line break. (The automatic
            documentation will pick just the first line as a summary.)
            Then a blank line should be added before any further
            documentation. Indentation should be consistent with rules
            for reStructured text.
        attribute: Use an ``attribute`` if additional information needs
            to be associated with a ``group``.
        choice: Use a ``choice`` if a named group could be either of a
            defined list of base classes.
        group: A ``group`` may contain ``group``s.
        field_value: A ``group`` may contain ``field`` elements
            (datasets).
        link: Use a ``link`` to refer locally to information placed
            elsewhere else in the data storage hierarchy. The ``name``
            attribute uniquely identifies the element in this ``group``.
            The ``target`` attribute (added automatically in a data file
            by the NAPI) identifies the original location of this data
            in the data storage hierarchy. In an NXDL specification, the
            ``target`` attribute indicates a link to be made by the
            software that writes the data file. The value, as written in
            the NXDL file, will be a suggestion of the path to the
            source of the link. For example:: <link xmlns="" name="data"
            target="/NXentry/NXinstrument/NXdetector/data"/> The value
            of ``target`` is written using the NeXus class names since
            this is a suggestion and does not actually use the element
            names from a particular data file.
        name: The ``name`` of this NXDL file (case sensitive without the
            file extension). The name must be unique amongst all the
            NeXus base class, application, and contributed definitions.
            For the class to be adopted by the NIAC, the first two
            letters must be "``NX``" (in uppercase).  Any other use must
            *not* begin with "``NX``" in any combination of upper or
            lower case.
        type_value: Must be ``type="group"``
        extends: The ``extends`` attribute allows this definition to
            *subclass* from another NXDL, otherwise
            ``extends="NXobject"`` should be used.
        restricts: The ``restricts`` attribute is a flag to the data
            validation. When ``restricts="1"``, any non-standard
            component found (and checked for validity against this NXDL
            specification) in a NeXus data file will be flagged as an
            error.  If the ``restricts`` attribute is not present, any
            such situations will produce a warning.
        svnid: (2014-08-19: deprecated since switch to GitHub version
            control) The identifier string from the subversion revision
            control system. This reports the time stamp and the revision
            number of this file.
        category: NXDL ``base`` definitions define the dictionary of
            terms to use for these components. All terms in a ``base``
            definition are optional. NXDL ``application`` definitions
            define what is required for a scientific interest. All terms
            in an ``application`` definition are required. NXDL
            ``contributed`` definitions may be considered either base or
            applications. Contributed definitions <emphasis
            xmlns="">must</emphasis> indicate their intended use, either
            as a base class or as an application definition.
        ignore_extra_groups: Only validate known groups; do not not warn
            about unknowns. The ``ignoreExtraGroups`` attribute is a
            flag to the process of validating NeXus data files.  By
            setting ``ignoreExtraGroups="true"``, presence of any
            undefined groups in this class will not generate warnings
            during validation.  Normally, validation will check all the
            groups against their definition in the NeXus base classes
            and application definitions.  Any items found that do not
            match the definition in the NXDL will generate a warning
            message. The ``ignoreExtraGroups`` attribute should be used
            sparingly!
        ignore_extra_fields: Only validate known fields; do not not warn
            about unknowns. The ``ignoreExtraFields`` attribute is a
            flag to the process of validating NeXus data files.  By
            setting ``ignoreExtraFields="true"``, presence of any
            undefined fields in this class will not generate warnings
            during validation.  Normally, validation will check all the
            fields against their definition in the NeXus base classes
            and application definitions.  Any items found that do not
            match the definition in the NXDL will generate a warning
            message. The ``ignoreExtraFields`` attribute should be used
            sparingly!
        ignore_extra_attributes: Only validate known attributes; do not
            not warn about unknowns. The ``ignoreExtraAttributes``
            attribute is a flag to the process of validating NeXus data
            files.  By setting ``ignoreExtraAttributes="true"``,
            presence of any undefined attributes in this class will not
            generate warnings during validation.  Normally, validation
            will check all the attributes against their definition in
            the NeXus base classes and application definitions.  Any
            items found that do not match the definition in the NXDL
            will generate a warning message. The
            ``ignoreExtraAttributes`` attribute should be used
            sparingly!
        deprecated: The presence of the ``deprecated`` attribute
            indicates to the data file validation process that an
            advisory message (specified as the content of the
            ``deprecated`` attribute) will be reported. Future versions
            of the NXDL file might not define (or even re-use) the
            component marked with this attribute. The value of the
            attribute will be printed in the documentation. Make it
            descriptive (limited to no line breaks). For example::
            deprecated="as of release MAJOR.MINOR" Note: because
            ``deprecated`` is an attribute, the XML rules do not permit
            it to have any element content.
    """

    class Meta:
        name = "definitionType"

    model_config = ConfigDict(defer_build=True)
    symbols: None | SymbolsType = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    doc: list[DocType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    attribute: list[AttributeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    choice: list[ChoiceType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    group: list[GroupType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    field_value: list[FieldType] = field(
        default_factory=list,
        metadata={
            "name": "field",
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    link: list[LinkType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://definition.nexusformat.org/nxdl/3.1",
        },
    )
    name: str = field(
        metadata={
            "type": "Attribute",
            "required": True,
            "max_length": 63,
            "pattern": r"[a-zA-Z0-9_]([a-zA-Z0-9_.]*[a-zA-Z0-9_])?",
        }
    )
    type_value: DefinitionTypeAttr = field(
        metadata={
            "name": "type",
            "type": "Attribute",
            "required": True,
        }
    )
    extends: None | object = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    restricts: None | object = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    svnid: None | object = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    category: DefinitionTypeCategory = field(
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    ignore_extra_groups: bool = field(
        default=False,
        metadata={
            "name": "ignoreExtraGroups",
            "type": "Attribute",
        },
    )
    ignore_extra_fields: bool = field(
        default=False,
        metadata={
            "name": "ignoreExtraFields",
            "type": "Attribute",
        },
    )
    ignore_extra_attributes: bool = field(
        default=False,
        metadata={
            "name": "ignoreExtraAttributes",
            "type": "Attribute",
        },
    )
    deprecated: None | str = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r".*(\w+).*",
        },
    )


class Definition(DefinitionType):
    """A ``definition`` element is the ``group`` at the root of every NXDL
    specification.

    It may *only* appear at the root of an NXDL file and must only
    appear **once** for the NXDL to be *well-formed*.
    """

    class Meta:
        name = "definition"
        namespace = "http://definition.nexusformat.org/nxdl/3.1"

    model_config = ConfigDict(defer_build=True)
